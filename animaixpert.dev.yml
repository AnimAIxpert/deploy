# Use root/example as user/password credentials
# Ports:
# WA : 80
# API: 8000
# USER: 8001
# CATALOGUE: 8002
# RATING: 8003
# RECOMMENDATION: 8004
version: '3.1'

services:
  user_ms:
    image: animaixpert/user_ms
    container_name: user_ms
    command: python3 -m gunicorn -w 4 -b 0.0.0.0:${USER_MS_PORT} app:app
    restart: always
    environment:
      MONGO_USERNAME: ${USER_DB_USERNAME}
      MONGO_PASSWORD: ${USER_DB_PASSWORD}
      MONGO_HOST: user_db
      MONGO_PORT: 27017
      MONGO_DATABASE: ${USER_DB_DATABASE}
    depends_on:
      - user_db
    ports:
      - "8001:8000"

  user_db:
    image: mongo
    restart: always
    container_name: user_db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${USER_DB_ADMIN_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${USER_DB_ADMIN_PASSWORD}
      - MONGO_INITDB_DATABASE=${USER_DB_DATABASE}
      - MONGO_USERNAME=${USER_DB_USERNAME}
      - MONGO_PASSWORD=${USER_DB_PASSWORD}
    volumes:
      - userdb:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    ports:
      - "27018:27017"
  
  rating_ms:
    image: animaixpert/rating_ms
    container_name: rating_ms
    command: python3 -m gunicorn -w 4 -b 0.0.0.0:${RATING_MS_PORT} main:app
    restart: always
    environment:
      MONGO_USERNAME: ${RATING_DB_USERNAME}
      MONGO_PASSWORD: ${RATING_DB_PASSWORD}
      MONGO_HOST: rating_db
      MONGO_PORT: 27017
      MONGO_DATABASE: ${RATING_DB_DATABASE}

    depends_on:
      - rating_db
    ports:
      - "8003:8000"
  
  rating_db:
    image: mongo
    restart: always
    container_name: rating_db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${RATING_DB_ADMIN_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${RATING_DB_ADMIN_PASSWORD}
      - MONGO_INITDB_DATABASE=${RATING_DB_DATABASE}
      - MONGO_USERNAME=${RATING_DB_USERNAME}
      - MONGO_PASSWORD=${RATING_DB_PASSWORD}
    volumes:
      - ratingdb:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    ports:
      - "27019:27017"

  catalogue_ms:
    image: animaixpert/catalogue_ms
    restart: always
    container_name: catalogue_ms
    environment:
      - USER_DB=${CATALOGUE_USER_DB}
      - PASSWORD_DB=${CATALOGUE_PASSWORD_DB}
      - HOST_DB=${CATALOGUE_HOST_DB}
      - PORT_DB=${CATALOGUE_PORT_DB}
      - DATABASE_NAME=${CATALOGUE_DATABASE_NAME}
      - API_PROTOCOL=${API_PROTOCOL}
      - API_HOST=${API_HOST}
      - API_PORT=${API_PORT}
    volumes:
      - cataloguedb:/data/db
      # - ./init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql
    depends_on:
      - catalogue_db
    ports:
      - "8002:8000"

  catalogue_db:
    image: postgres
    restart: always
    container_name: catalogue_db
    environment:
      - POSTGRES_USER=${CATALOGUE_USER_DB}
      - POSTGRES_PASSWORD=${CATALOGUE_PASSWORD_DB}
      - POSTGRES_DB=${CATALOGUE_DATABASE_NAME}
    ports:
      - "5433:5432"    

  web_app:
    image: animaixpert/animaixpert_wa
    restart: always
    container_name: web_app
    ports:
      - "80:3000"
    environment:
     - REACT_APP_PROTOCOL=${API_PROTOCOL}
     - REACT_APP_BACKEND_HOST=${API_HOST}
     - REACT_APP_BACKEND_PORT=${API_PORT}
  
  api:
    image: animaixpert/animaixpert_api
    restart: always
    container_name: api
    environment:
     - FRONT_END_PROTOCOL=${FRONTEND_PROTOCOL}
     - FRONT_END_HOST=${FRONTEND_HOST}
     - FRONT_END_PORT=${FRONTEND_PORT}
     - USER_MS_HOST=${USER_MS_HOST}
     - USER_MS_PORT=${USER_MS_PORT}
     - CATALOGUE_MS_HOST=${CATALOGUE_MS_HOST}
     - CATALOGUE_MS_PORT=${CATALOGUE_MS_PORT}
     - RATING_MS_HOST=${RATING_MS_HOST}
     - RATING_MS_PORT=${RATING_MS_PORT}
    ports:
      - "8000:8000"

volumes:
  userdb:
  cataloguedb:
  ratingdb: